import streamlit as st
import pandas as pd
import plotly.express as px
from datetime import datetime
from utils import carregar_emocoes, salvar_emocoes, carregar_reflexoes, salvar_reflexoes
from auth import get_current_username
import requests
import os
import json

st.set_page_config(page_title="Jarvis ‚Äì Painel Emocional", layout="wide")
st.title("üß† Jarvis ‚Äì Painel Emocional com Apoio Pessoal")

# --- Bot√£o discreto para voltar ao chat principal ---
with st.container():
    col1, col2 = st.columns([0.85, 0.15])
    with col2:
        if st.button("‚¨ÖÔ∏è Voltar", use_container_width=True):
            st.switch_page("app.py")

username = get_current_username()
# Carrega as emo√ß√µes (pode conter formatos mistos: dicion√°rio ou string)
emocoes_dict_raw = carregar_emocoes(username)

if not emocoes_dict_raw:
    st.info("Nenhum dado emocional registrado ainda. Interaja no chat para que eu detecte automaticamente üíô")
    st.stop()

# --- IN√çCIO DA CORRE√á√ÉO CIR√öRGICA: Normaliza√ß√£o e Cria√ß√£o do DataFrame ---
normalized_emocoes_list = []
for timestamp, data in emocoes_dict_raw.items():
    entry = {"timestamp": timestamp}
    if isinstance(data, dict):
        # Se for um dicion√°rio, extrai as chaves e valores
        entry.update(data)
        # Garante que a chave 'emocao' exista e seja uma string, convertendo para min√∫sculas
        entry['emocao'] = str(entry.get('emocao', 'desconhecida')).lower()
        # Fallback para outras chaves de sentimento se 'emocao' n√£o for encontrada
        if entry['emocao'] == 'desconhecida':
            if 'sentimento_mensagem_usuario' in entry and isinstance(entry['sentimento_mensagem_usuario'], str):
                entry['emocao'] = entry['sentimento_mensagem_usuario'].lower()
            elif 'sentimento' in entry and isinstance(entry['sentimento'], str):
                entry['emocao'] = entry['sentimento'].lower()
    elif isinstance(data, str):
        # Se for uma string (formato antigo), cria um dicion√°rio padr√£o
        entry['emocao'] = data.lower()
        entry['sentimento_mensagem_usuario'] = "N√£o dispon√≠vel"
        entry['tipo_interacao'] = "N√£o dispon√≠vel"
        entry['topico_interacao'] = "N√£o dispon√≠vel"
        entry['dia_da_semana'] = "N√£o dispon√≠vel"
        entry['periodo_do_dia'] = "N√£o dispon√≠vel"
        entry['prompt_original'] = "N√£o dispon√≠vel"
        
        # Tenta inferir dia da semana e per√≠odo do dia para entradas antigas
        try:
            ts_obj = pd.to_datetime(timestamp, errors='coerce')
            if pd.notna(ts_obj):
                entry["dia_da_semana"] = ts_obj.strftime('%A').lower()
                hora = ts_obj.hour
                if 5 <= hora < 12: entry["periodo_do_dia"] = "manh√£"
                elif 12 <= hora < 18: entry["periodo_do_dia"] = "tarde"
                else: entry["periodo_do_dia"] = "noite"
        except Exception as e:
            print(f"Erro ao inferir data/hora para timestamp {timestamp}: {e}")

    normalized_emocoes_list.append(entry)

# Cria o DataFrame a partir da lista normalizada de dicion√°rios
df = pd.DataFrame(normalized_emocoes_list)

# Converte a coluna timestamp para datetime, lidando com formatos mistos
df["timestamp"] = pd.to_datetime(df["timestamp"], format='mixed', errors='coerce')
df = df.dropna(subset=['timestamp']) # Remove linhas com timestamps inv√°lidos

# Garante que 'emocao' seja string e ordena por timestamp
df['emocao'] = df['emocao'].astype(str)
df = df.sort_values("timestamp", ascending=True)

# Pega a √∫ltima emo√ß√£o depois da normaliza√ß√£o e ordena√ß√£o
ultima_emocao = df.iloc[-1]["emocao"] if not df.empty and "emocao" in df.columns else None
# --- FIM DA CORRE√á√ÉO CIR√öRGICA: Normaliza√ß√£o e Cria√ß√£o do DataFrame ---

# === DIAGN√ìSTICO EMOCIONAL VISUAL ===
# Garante que 'ultimos_10' seja processado a partir do df normalizado e limpo
ultimos_10 = df["emocao"].tail(10).tolist() if "emocao" in df.columns else []
# Define 'ultimos' no escopo global para uso no alerta de risco
ultimos = df["emocao"].tail(5).tolist() if "emocao" in df.columns else []


positivas = ["feliz", "grato", "animado"]
negativas = ["triste", "desesperado", "suicida", "cansado", "esgotado", "irritado", "raivoso"]
alerta = ["ansioso", "preocupado"]

estado = "Neutro"
cor = "#B0BEC5"  # cinza claro

if any(e in ultimos_10 for e in negativas):
    estado = "Ruim"
    cor = "#EF5350"  # vermelho
elif any(e in ultimos_10 for e in alerta):
    estado = "Aten√ß√£o"
    cor = "#FFB300"  # amarelo
elif any(e in ultimos_10 for e in positivas):
    estado = "Bom"
    cor = "#66BB6A"  # verde

with st.container():
    st.markdown(f"""
    <div style='background-color:{cor};padding:15px;border-radius:8px;text-align:center;'>
        <h3 style='color:white;margin:0;'>Estado Emocional Atual: {estado.upper()}</h3>
        <small style='color:white;'>Com base nas √∫ltimas 10 emo√ß√µes registradas</small>
    </div>
    """, unsafe_allow_html=True)

# =======================================================
# === FUN√á√ÉO PARA BUSCA DIN√ÇMICA VIA SERPER API ===
# =======================================================

SERPER_API_KEY = st.secrets.get("SERPER_API_KEY") or os.getenv("SERPER_API_KEY")
SERPER_API_ENDPOINT_VIDEOS = "https://google.serper.dev/videos"
SERPER_API_ENDPOINT_SEARCH = "https://google.serper.dev/search"

def search_content_via_serper_api(query, content_type="video", max_results=1):
    """
    Pesquisa conte√∫do relevante usando a Serper API.

    Args:
        query (str): O termo de busca.
        content_type (str): Tipo de conte√∫do preferencial ("video", "general").
        max_results (int): N√∫mero m√°ximo de resultados desejados.

    Returns:
        str: A URL do conte√∫do mais relevante, ou None se n√£o encontrar.
    """
    if not SERPER_API_KEY:
        print("Chave da SERPER_API_KEY n√£o configurada. Por favor, configure-a.")
        return None

    if content_type == "video":
        api_url = SERPER_API_ENDPOINT_VIDEOS
        payload = json.dumps({"q": query, "num": max_results})
    else: # content_type == "general" ou qualquer outro
        api_url = SERPER_API_ENDPOINT_SEARCH
        payload = json.dumps({"q": query, "num": max_results})

    headers = {
        'X-API-KEY': SERPER_API_KEY,
        'Content-Type': 'application/json'
    }

    try:
        response = requests.post(api_url, headers=headers, data=payload, timeout=10)
        response.raise_for_status() # Lan√ßa um erro para status de resposta HTTP ruins (4xx ou 5xx)

        data = response.json()

        if content_type == "video":
            if data and data.get("videos"):
                first_video = data["videos"][0]
                if "link" in first_video:
                    return first_video["link"]
        else: # Busca geral
            if data and data.get("organic"):
                first_result = data["organic"][0]
                if "link" in first_result:
                    return first_result["link"]
        return None

    except requests.exceptions.RequestException as e:
        print(f"Erro na requisi√ß√£o √† Serper API: {e}")
        return None
    except json.JSONDecodeError as e:
        print(f"Erro ao decodificar JSON da Serper API: {e}")
        return None
    except Exception as e:
        print(f"Erro inesperado ao buscar conte√∫do via Serper API: {e}")
        return None


# =======================================================
# === Fun√ß√£o de recomenda√ß√£o personalizada (AGORA USA A SERPER API) ===
# =======================================================
def gerar_recomendacao_emocional(df_emocoes):
    if df_emocoes.empty:
        return None, None

    # Certifique-se de que ultima_emocao seja uma string antes de usar .lower()
    ultima = df_emocoes.iloc[-1]["emocao"].lower() if "emocao" in df_emocoes.columns and not df_emocoes.empty else None
    
    # Certifique-se de que a coluna 'emocao' contenha strings antes de chamar .str.lower()
    # Esta vari√°vel 'ultimos_local' √© para uso interno da fun√ß√£o, n√£o confundir com a global
    ultimos_local = df_emocoes["emocao"].astype(str).tail(5).str.lower().tolist()

    recomendacoes = {
        "triste": {
            "mensagem": "üö® Percebo uma sequ√™ncia de tristeza. Voc√™ n√£o est√° s√≥. Recomendo este apoio imediato:",
            "query": "v√≠deos de apoio para tristeza e des√¢nimo"
        },
        "desesperado": {
            "mensagem": "‚ö†Ô∏è Estou aqui com voc√™. Essa √© uma situa√ß√£o que precisa de acolhimento humano. Por favor, procure apoio agora:",
            "link": "https://www.cvv.org.br" # Mantido fixo para recursos cr√≠ticos
        },
        "suicida": {
            "mensagem": "‚ö†Ô∏è Estou aqui com voc√™. Essa √© uma situa√ß√£o que precisa de acolhimento humano. Por favor, procure apoio agora:",
            "link": "https://www.cvv.org.br" # Mantido fixo para recursos cr√≠ticos
        },
        "ansioso": {
            "mensagem": "üå¨Ô∏è Uma t√©cnica de respira√ß√£o pode te ajudar agora. Respire comigo:",
            "query": "exerc√≠cios de respira√ß√£o para ansiedade"
        },
        "preocupado": {
            "mensagem": "üå¨Ô∏è Uma t√©cnica de respira√ß√£o pode te ajudar agora. Respire comigo:",
            "query": "exerc√≠cios de respira√ß√£o para acalmar a mente"
        },
        "cansado": {
            "mensagem": "üò¥ Voc√™ merece um descanso. Essa m√∫sica ambiente ajuda a recarregar a mente:",
            "query": "m√∫sica relaxante para dormir"
        },
        "esgotado": {
            "mensagem": "üò¥ Voc√™ merece um descanso. Essa m√∫sica ambiente ajuda a recarregar a mente:",
            "query": "m√∫sica para relaxar e recarregar energias"
        },
        "irritado": {
            "mensagem": "‚ö° Canalize sua raiva com clareza. Essa explica√ß√£o pode te ajudar:",
            "query": "como lidar com a raiva t√©cnicas"
        },
        "raivoso": {
            "mensagem": "‚ö° Canalize sua raiva com clareza. Essa explica√ß√£o pode te ajudar:",
            "query": "gerenciamento da raiva dicas"
        },
        "feliz": {
            "mensagem": "üåà Que bom te ver assim! Continue espalhando luz. Uma m√∫sica suave para manter esse clima:",
            "query": "m√∫sica positiva para bem estar"
        },
        "grato": {
            "mensagem": "üåà Que bom te ver assim! Continue espalhando luz. Uma m√∫sica suave para manter esse clima:",
            "query": "m√∫sica inspiradora para gratid√£o"
        },
        "animado": {
            "mensagem": "üåà Que bom te ver assim! Continue espalhando luz. Uma m√∫sica suave para manter esse clima:",
            "query": "m√∫sica alegre e motivadora"
        }
    }

    link_encontrado = None
    mensagem_final = None
    query_para_busca = None

    # Primeiro, verifica a √∫ltima emo√ß√£o para recomenda√ß√£o direta
    if ultima in recomendacoes: 
        config = recomendacoes[ultima]
        mensagem_final = config["mensagem"]
        if "link" in config:
            link_encontrado = config["link"]
        else:
            query_para_busca = config["query"]

    # Em seguida, sobrep√µe com a condi√ß√£o de tristeza persistente, se aplic√°vel
    if ultimos_local.count("triste") >= 3:
        mensagem_final = recomendacoes["triste"]["mensagem"]
        query_para_busca = recomendacoes["triste"]["query"]
        link_encontrado = None # Garante que a busca seja feita para esta condi√ß√£o

    # Se uma query foi definida e nenhum link fixo foi encontrado, fa√ßa a busca
    if query_para_busca and not link_encontrado:
        if "v√≠deos" in query_para_busca.lower() or "m√∫sica" in query_para_busca.lower():
            link_encontrado = search_content_via_serper_api(query_para_busca, content_type="video")
        else:
            link_encontrado = search_content_via_serper_api(query_para_busca, content_type="general")

    # Caso n√£o caia em nenhuma das condi√ß√µes espec√≠ficas ou se a busca falhar, use um padr√£o
    if not link_encontrado:
        mensagem_final = "üí¨ Voc√™ est√° em equil√≠brio. Se quiser, aqui vai um conte√∫do para manter o bem-estar:"
        link_encontrado = search_content_via_serper_api("conte√∫do sobre bem-estar e sa√∫de mental", content_type="general")
        if not link_encontrado: # Fallback caso a busca final tamb√©m falhe
            link_encontrado = "https://www.google.com/search?q=conte%C3%Bado+para+bem+estar" # Exemplo de busca gen√©rica no Google

    if link_encontrado:
        return mensagem_final, link_encontrado
    else:
        return None, None

# Supondo que 'df' e 'ultima_emocao' j√° estejam definidos em seu c√≥digo
# Antes da parte de visualiza√ß√£o, chame a fun√ß√£o de recomenda√ß√£o
recomendacao_mensagem, recomendacao_link = gerar_recomendacao_emocional(df)

if recomendacao_link and recomendacao_mensagem:
    st.markdown(f"**{recomendacao_mensagem}**")
    st.markdown(f"[{recomendacao_link}]({recomendacao_link})")

# === VISUALIZA√á√ïES ===
col1, col2 = st.columns(2)
with col1:
    st.subheader("üìä Distribui√ß√£o das Suas Emo√ß√µes")
    if not df.empty:
        emocao_counts = df["emocao"].value_counts().reset_index()
        emocao_counts.columns = ["emocao", "contagem"]
        fig_pie = px.pie(
            emocao_counts,
            values="contagem",
            names="emocao",
            title="Sua Paisagem Emocional",
            hole=0.3,
        )
        st.plotly_chart(fig_pie, use_container_width=True)
    else:
        st.info("Nenhum dado emocional para exibir ainda.")

with col2:
    st.subheader("üìà Emo√ß√µes ao Longo do Tempo")
    if not df.empty:
        fig_line = px.line(
            df,
            x="timestamp",
            y="emocao",
            title="Varia√ß√£o das Emo√ß√µes",
            markers=True,
            line_shape="linear",
        )
        fig_line.update_layout(yaxis_title="Emo√ß√£o")
        st.plotly_chart(fig_line, use_container_width=True)
    else:
        st.info("Nenhum dado emocional para exibir ainda.")


# Feedback do Usu√°rio
st.subheader("‚ú® Sua Opini√£o √© Importante!")
with st.form("form_feedback"):
    feedback_emocao = st.selectbox(
        "Como voc√™ se sente sobre esta an√°lise?",
        ["√ìtimo", "Bom", "Neutro", "Ruim", "P√©ssimo"]
    )
    feedback_comentario = st.text_area("Coment√°rios (opcional):")
    submitted = st.form_submit_button("Enviar Feedback")
    if submitted:
        st.success("Obrigado pelo seu feedback! Isso me ajuda a melhorar. üöÄ")

# Suporte extra (CVV e outros)
st.subheader("üÜò Precisa de ajuda imediata?")
st.write(
    "Se voc√™ est√° passando por um momento muito dif√≠cil, por favor, n√£o hesite em procurar apoio profissional:"
)
st.markdown("- **Centro de Valoriza√ß√£o da Vida (CVV):** Ligue 188 ou acesse [cvv.org.br](https://www.cvv.org.br)")
st.markdown(
    "- **Busque um profissional de sa√∫de mental:** psic√≥logos e psiquiatras podem te ajudar. Se for uma emerg√™ncia, procure o servi√ßo de sa√∫de mais pr√≥ximo."
)
st.info("Interaja mais comigo para que eu possa te ajudar melhor üíô")

# Autoajuda CBT guiada ‚Äì Refletir sobre um pensamento dif√≠cil
with st.expander("üí≠ Refletir sobre um pensamento dif√≠cil"):
    pensamento = st.text_area("1. O que est√° te incomodando?", key="reflexao_pensamento")
    impacto = st.text_area("2. Como isso afetou seu dia?", key="reflexao_impacto")
    reframe = st.text_area("3. Uma forma mais equilibrada de pensar:", key="reflexao_reframe")

    if st.button("üíæ Salvar reflex√£o", type="primary"):
        if pensamento.strip() and impacto.strip() and reframe.strip():
            nova_reflexao = {
                "timestamp": datetime.now().isoformat(),
                "pensamento": pensamento,
                "impacto": impacto,
                "reframe": reframe
            }

            reflexoes_anteriores = carregar_reflexoes(username) or []
            reflexoes_anteriores.append(nova_reflexao)

            sucesso = salvar_reflexoes(reflexoes_anteriores, username)
            if sucesso:
                st.success("Reflex√£o registrada com sucesso! üí™")
            else:
                st.error("Erro ao salvar a reflex√£o.")
        else:
            st.warning("Por favor, preencha todos os campos antes de salvar.")

    # Visualiza√ß√£o das √∫ltimas reflex√µes
    reflexoes_existentes = carregar_reflexoes(username)
    if reflexoes_existentes:
        with st.expander("üßæ Visualizar reflex√µes anteriores"):
            for ref in reversed(reflexoes_existentes[-5:]):  # mostra s√≥ as 5 √∫ltimas
                st.markdown(f"""
                üóìÔ∏è **{ref['timestamp']}**
                - **Pensamento:** {ref['pensamento']}
                - **Impacto:** {ref['impacto']}
                - **Reestrutura√ß√£o:** {ref['reframe']}
                """)


# üìú Hist√≥rico completo com filtros, √≠cones e exclus√£o
with st.expander("üìú Hist√≥rico completo e exporta√ß√£o"):
    st.subheader("üìÖ Filtros para an√°lise emocional")

    col1, col2, col3 = st.columns(3)
    with col1:
        # Garante que data_inicio e data_fim tenham valores padr√£o razo√°veis mesmo com df vazio
        min_date = df["timestamp"].min().date() if not df.empty else datetime.now().date()
        data_inicio = st.date_input("Data inicial", value=min_date)
    with col2:
        max_date = df["timestamp"].max().date() if not df.empty else datetime.now().date()
        data_fim = st.date_input("Data final", value=max_date)
    with col3:
        # Garante que as op√ß√µes de filtro_emocao sejam sempre strings
        unique_emotions = df["emocao"].astype(str).unique().tolist() if "emocao" in df.columns else []
        filtro_emocao = st.selectbox("Filtrar por emo√ß√£o", options=["Todas"] + sorted(unique_emotions))

    palavra_chave = st.text_input("üîç Filtrar por palavra-chave (opcional)")

    # Aplicar filtros
    df_filtrado = df.copy()
    if not df.empty: # Aplica filtros apenas se o DataFrame n√£o estiver vazio
        df_filtrado = df_filtrado[df_filtrado["timestamp"].dt.date.between(data_inicio, data_fim)]

        if filtro_emocao != "Todas":
            df_filtrado = df_filtrado[df_filtrado["emocao"] == filtro_emocao]

        if palavra_chave:
            df_filtrado = df_filtrado[df_filtrado["emocao"].str.contains(palavra_chave, case=False, na=False)]

    # √çcones por emo√ß√£o
    emoji_cor = {
        "feliz": "üü†",
        "triste": "üîµ",
        "ansioso": "üü£",
        "cansado": "üü§",
        "irritado": "üî¥",
        "calmo": "üü¢",
        "preocupado": "üü°",
        "grato": "üü°",
        "desesperado": "‚ö´",
        "suicida": "‚ö´",
        "animado": "üü¢" # Adicionado para completar
    }

    if not df_filtrado.empty and "emocao" in df_filtrado.columns:
        df_filtrado["emo√ß√£o com √≠cone"] = df_filtrado["emocao"].apply(lambda e: f"{emoji_cor.get(e.lower(), '‚ö™')} {e}")
        st.dataframe(df_filtrado[["timestamp", "emo√ß√£o com √≠cone"]].sort_values("timestamp", ascending=False), use_container_width=True)
    else:
        st.info("Nenhum dado emocional para exibir com os filtros aplicados.")

    # Exportar CSV
    if not df_filtrado.empty:
        st.download_button(
            label="‚¨áÔ∏è Baixar hist√≥rico filtrado (CSV)",
            data=df_filtrado.to_csv(index=False).encode('utf-8'),
            file_name="historico_emocional.csv",
            mime="text/csv"
        )
    else:
        st.info("Nenhum dado para exportar.")

    # Bot√£o para apagar tudo
    st.markdown("---")
    if st.button("üóëÔ∏è Apagar todo o hist√≥rico emocional"):
        salvar_emocoes({}, username)
        st.success("Todos os dados emocionais foram apagados com carinho.")
        st.rerun()


# Alerta de risco real
# Acesso a 'ultima_emocao' e 'ultimos' deve ser seguro
if ultima_emocao is not None and ultima_emocao.lower() in ["desesperado", "suicida"] or ultimos.count("triste") >= 4:
    st.warning("üö® **Alerta!** Suas emo√ß√µes recentes indicam a necessidade de aten√ß√£o especial. Por favor, considere procurar ajuda profissional.")
    st.markdown("- **Centro de Valoriza√ß√£o da Vida (CVV):** Ligue **188** ou acesse [cvv.org.br](https://www.cvv.org.br)")