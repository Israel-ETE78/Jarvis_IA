# pages/6_Visualizar_Feedback.py

import streamlit as st
import pandas as pd
import json
import os

# --- Configura√ß√£o da P√°gina e Prote√ß√£o de Acesso ---
st.set_page_config(page_title="Dashboard de Feedback", page_icon="üìä")

# Verifica o usu√°rio logado
ADMIN_USERNAME = st.secrets.get("ADMIN_USERNAME", os.getenv("ADMIN_USERNAME"))
username = st.session_state.get("username")

# Prote√ß√£o de acesso: Apenas o admin pode ver esta p√°gina
if username != ADMIN_USERNAME:
    st.error("‚õî Acesso restrito! Esta p√°gina √© exclusiva para o administrador.")
    st.stop()

# --- Fun√ß√£o para Carregar os Dados ---
@st.cache_data(ttl=60)  # Cache para n√£o recarregar o arquivo a cada segundo
def carregar_feedback():
    caminho_arquivo = "dados/feedback.json"
    if os.path.exists(caminho_arquivo):
        try:
            df = pd.read_json(caminho_arquivo, encoding="utf-8")
            return df
        except (ValueError, FileNotFoundError):
            return pd.DataFrame()  # Retorna um DataFrame vazio se o arquivo estiver corrompido ou vazio
    return pd.DataFrame()

# --- Constru√ß√£o do Dashboard ---
st.title("üìä Painel de Feedback dos Usu√°rios")
st.markdown("Analise aqui o que os usu√°rios est√£o achando do Jarvis.")

df_feedback = carregar_feedback()

# Adiciona o bot√£o de limpar feedbacks
if st.button("Limpar Todos os Feedbacks"):
    caminho_arquivo = "dados/feedback.json"
    with open(caminho_arquivo, "w") as f:
        json.dump([], f)  # Escreve uma lista vazia para remover os dados existentes
    st.success("Feedbacks limpos com sucesso!")
    # Recarrega os feedbacks ap√≥s a limpeza
    df_feedback = carregar_feedback()

# Verifica se h√° feedbacks para exibir
if df_feedback.empty:
    st.info("Ainda n√£o h√° nenhum feedback para exibir. Assim que os usu√°rios enviarem, os dados aparecer√£o aqui.")
else:
    st.divider()

    # --- M√©tricas Principais ---
    st.subheader("üìà M√©tricas Gerais")
    col1, col2 = st.columns(2)

    # Calcula a nota m√©dia, tratando o caso de n√£o haver notas ainda
    nota_media = df_feedback['rating'].mean() if not df_feedback['rating'].empty else 0
    total_feedbacks = len(df_feedback)

    with col1:
        st.metric(label="Nota M√©dia Geral", value=f"{nota_media:.2f} ‚≠ê")

    with col2:
        st.metric(label="Total de Feedbacks Recebidos", value=total_feedbacks)

    st.divider()

    # --- Gr√°fico de Distribui√ß√£o de Notas ---
    st.subheader("‚≠êÔ∏è Distribui√ß√£o das Avalia√ß√µes")

    # Conta a ocorr√™ncia de cada nota (1 a 5)
    contagem_notas = df_feedback['rating'].value_counts().sort_index()

    if not contagem_notas.empty:
        st.bar_chart(contagem_notas)
    else:
        st.write("Nenhuma avalia√ß√£o num√©rica foi registrada ainda.")

    st.divider()

    # --- Tabela com Coment√°rios ---
    st.subheader("üí¨ Coment√°rios Detalhados")

    # Filtra para mostrar apenas feedbacks que t√™m coment√°rios
    df_comentarios = df_feedback[df_feedback['comment'].notna() & (df_feedback['comment'] != '')]

    if not df_comentarios.empty:
        # Exibe a tabela com as colunas mais importantes
        st.dataframe(
            df_comentarios[['timestamp', 'username', 'rating', 'comment']],
            use_container_width=True,
            hide_index=True,
            column_config={
                "timestamp": st.column_config.TextColumn("Data"),
                "username": st.column_config.TextColumn("Usu√°rio"),
                "rating": st.column_config.NumberColumn("Nota", format="%d ‚≠ê"),
                "comment": st.column_config.TextColumn("Coment√°rio", width="large")
            }
        )
    else:
        st.info("Nenhum coment√°rio escrito foi deixado pelos usu√°rios.")